javascript:(function(){const loadChartJs=()=>new Promise(((resolve,reject)=>{if(window.Chart){resolve(window.Chart);return}const script=document.createElement("script");script.src="https://cdn.jsdelivr.net/npm/chart.js";script.onload=()=>resolve(window.Chart);script.onerror=()=>reject(new Error("Failed to load Chart.js"));document.head.appendChild(script)}));const modA11yCheck={state:{tests:[],currentTest:0,results:{automated:[],interactive:[],timeline:[]},startTime:new Date},async init(){try{await loadChartJs();this.createUI();this.initTests();this.bindEvents();this.startAutomatedTests()}catch(error){console.error("Failed to initialize modA11yCheck:",error)}},createUI(){const container=document.createElement("div");container.id="moda11y-check";container.style.cssText=`\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        width: 400px;\n        background: #fff;\n        border-radius: 8px;\n        box-shadow: 0 0 20px rgba(0,0,0,0.2);\n        z-index: 999999;\n        font-family: system-ui;\n        padding: 20px;\n        max-height: 90vh;\n        overflow-y: auto;\n      `;container.innerHTML=`\n        <style>\n          #moda11y-check * { box-sizing: border-box; }\n          .test-section { margin: 15px 0; }\n          .test-item {\n            padding: 10px;\n            border: 1px solid #eee;\n            margin: 5px 0;\n            border-radius: 4px;\n          }\n          .pass { border-left: 4px solid #4caf50; }\n          .fail { border-left: 4px solid #f44336; }\n          .warning { border-left: 4px solid #ff9800; }\n          .tab-content { display: none; }\n          .tab-content.active { display: block; }\n          .tabs {\n            display: flex;\n            margin-bottom: 15px;\n            border-bottom: 2px solid #eee;\n          }\n          .tab {\n            padding: 8px 16px;\n            cursor: pointer;\n            border-bottom: 2px solid transparent;\n            margin-bottom: -2px;\n          }\n          .tab.active {\n            border-bottom-color: #2196f3;\n            color: #2196f3;\n          }\n          .chart-container {\n            margin: 20px 0;\n            height: 300px;\n          }\n          .interactive-test {\n            background: #f5f5f5;\n            padding: 15px;\n            margin: 10px 0;\n            border-radius: 4px;\n          }\n          .btn {\n            padding: 8px 16px;\n            border: none;\n            border-radius: 4px;\n            background: #2196f3;\n            color: white;\n            cursor: pointer;\n          }\n          .btn:hover { background: #1976d2; }\n          .close-btn {\n            position: absolute;\n            top: 10px;\n            right: 10px;\n            border: none;\n            background: none;\n            font-size: 20px;\n            cursor: pointer;\n          }\n          @media (prefers-color-scheme: dark) {\n            #moda11y-check {\n              background: #1a1a1a;\n              color: #fff;\n            }\n            .test-item { border-color: #333; }\n            .interactive-test { background: #2d2d2d; }\n          }\n        </style>\n        <div class="header">\n          <h2>Moda11y Check</h2>\n          <button class="close-btn" onclick="this.parentElement.parentElement.remove()">Ã—</button>\n        </div>\n        <div class="tabs">\n          <div class="tab active" data-tab="tests">Tests</div>\n          <div class="tab" data-tab="results">Results</div>\n          <div class="tab" data-tab="charts">Charts</div>\n        </div>\n        <div id="content-tests" class="tab-content active">\n          <div id="automated-tests"></div>\n          <div id="interactive-tests"></div>\n        </div>\n        <div id="content-results" class="tab-content">\n          <div id="test-summary"></div>\n          <div id="test-details"></div>\n        </div>\n        <div id="content-charts" class="tab-content">\n          <div class="chart-container">\n            <canvas id="resultsChart"></canvas>\n          </div>\n          <div class="chart-container">\n            <canvas id="timelineChart"></canvas>\n          </div>\n        </div>\n      `;document.body.appendChild(container);this.container=container},initTests(){this.tests={automated:[{name:"Dialog Role",category:"ARIA",test:()=>{const modal=document.querySelector('[role="dialog"], [role="alertdialog"]');return{pass:!!modal,message:modal?"Dialog role correctly implemented":"No dialog role found",element:modal}}},{name:"ARIA Modal",category:"ARIA",test:()=>{const modal=document.querySelector('[aria-modal="true"]');return{pass:!!modal,message:modal?"aria-modal attribute present":"Missing aria-modal attribute",element:modal}}},{name:"Focus Management",category:"Focus",test:()=>{const modal=document.querySelector('[role="dialog"], [role="alertdialog"]');const focusableElements=modal?.querySelectorAll('a[href], button:not([disabled]), input:not([disabled]), select:not([disabled]), textarea:not([disabled]), [tabindex]:not([tabindex="-1"])');return{pass:focusableElements?.length>0,message:`Found ${focusableElements?.length||0} focusable elements`,element:modal}}},{name:"Modal Labelling",category:"ARIA",test:()=>{const modal=document.querySelector('[role="dialog"], [role="alertdialog"]');const hasLabel=modal?.hasAttribute("aria-label");const hasLabelledBy=modal?.hasAttribute("aria-labelledby");const labelledByElement=hasLabelledBy&&document.getElementById(modal.getAttribute("aria-labelledby"));return{pass:hasLabel||hasLabelledBy&&labelledByElement,message:hasLabel?"aria-label found":hasLabelledBy&&labelledByElement?"aria-labelledby reference found":"Missing accessible name",element:modal}}},{name:"Background Interaction",category:"Structure",test:()=>{const modal=document.querySelector('[role="dialog"][aria-modal="true"]');const backdrop=document.querySelector('.modal-backdrop, .overlay, [class*="backdrop"]');const mainContent=document.querySelector('main, #main, [role="main"]');const checks={pointerEvents:backdrop&&getComputedStyle(backdrop).pointerEvents==="none",inertAttribute:mainContent?.hasAttribute("inert"),ariaHidden:mainContent?.getAttribute("aria-hidden")==="true",focusTrap:document.querySelector("[data-focus-trap], [data-focus-guard]")!==null,tabIndex:Array.from(mainContent?.querySelectorAll("a, button, input")||[]).some((el=>el.getAttribute("tabindex")==="-1"))};const results=Object.entries(checks).filter((([,value])=>value));return{pass:results.length>=2,message:results.length?`Background blocked using: ${results.map((([key])=>key)).join(", ")}`:"No background interaction blocking found",details:checks,element:backdrop||mainContent}}}],interactive:[{name:"Keyboard Navigation",instructions:["Press Tab key to navigate through modal","Verify focus is trapped within modal","Check if all interactive elements are reachable"],verificationPoints:["Focus stays within modal","All interactive elements are reachable","Focus order is logical"]},{name:"Escape Key",instructions:["Press Escape key while modal is open","Verify modal closes","Check if focus returns to trigger element"],verificationPoints:["Modal closes with Escape key","Focus returns to previous element","No keyboard traps remain"]}]}},async startAutomatedTests(){for(const test of this.tests.automated){await this.runTest(test)}this.showInteractiveTests();this.updateCharts()},async runTest(test){try{const startTime=performance.now();const result=await test.test();const duration=performance.now()-startTime;const testResult={name:test.name,category:test.category,status:result.pass?"pass":"fail",message:result.message,duration:duration,timestamp:new Date};this.state.results.automated.push(testResult);this.state.results.timeline.push({time:new Date,test:test.name,duration:duration});this.updateTestUI(testResult)}catch(error){console.error(`Test "${test.name}" failed:`,error)}},showInteractiveTests(){const container=this.container.querySelector("#interactive-tests");container.innerHTML="<h3>Interactive Tests</h3>";this.tests.interactive.forEach(((test,index)=>{const testElement=document.createElement("div");testElement.className="interactive-test";testElement.innerHTML=`\n              <h4>${test.name}</h4>\n              <div class="instructions">\n                <h5>Instructions:</h5>\n                <ul>${test.instructions.map((i=>`<li>${i}</li>`)).join("")}</ul>\n              </div>\n              <div class="verification">\n                <h5>Verification Points:</h5>\n                <ul>${test.verificationPoints.map((p=>`\n                  <li>\n                    <input type="checkbox" id="check-${index}-${p.replace(/\s/g,"")}" />\n                    <label for="check-${index}-${p.replace(/\s/g,"")}">${p}</label>\n                  </li>\n                `)).join("")}</ul>\n              </div>\n            `;container.appendChild(testElement)}))},updateTestUI(result){const testsContainer=this.container.querySelector("#automated-tests");const testElement=document.createElement("div");testElement.className=`test-item ${result.status}`;testElement.innerHTML=`\n            <h4>${result.name}</h4>\n            <p>${result.message}</p>\n            <small>Duration: ${result.duration.toFixed(2)}ms</small>\n          `;testsContainer.appendChild(testElement)},updateCharts(){this.createResultsChart();this.createTimelineChart()},createResultsChart(){const results=this.state.results.automated;const ctx=this.container.querySelector("#resultsChart").getContext("2d");new Chart(ctx,{type:"doughnut",data:{labels:["Passed","Failed","Warnings"],datasets:[{data:[results.filter((r=>r.status==="pass")).length,results.filter((r=>r.status==="fail")).length,results.filter((r=>r.status==="warning")).length],backgroundColor:["#4caf50","#f44336","#ff9800"]}]},options:{responsive:true,plugins:{title:{display:true,text:"Test Results Overview"}}}})},createTimelineChart(){const ctx=this.container.querySelector("#timelineChart").getContext("2d");const timeline=this.state.results.timeline;new Chart(ctx,{type:"line",data:{labels:timeline.map((t=>t.test)),datasets:[{label:"Test Duration (ms)",data:timeline.map((t=>t.duration)),borderColor:"#2196f3",tension:.1}]},options:{responsive:true,plugins:{title:{display:true,text:"Test Execution Timeline"}},scales:{y:{beginAtZero:true,title:{display:true,text:"Duration (ms)"}}}}})},generateReport(){const results=this.state.results;const summary={total:results.automated.length,passed:results.automated.filter((r=>r.status==="pass")).length,failed:results.automated.filter((r=>r.status==="fail")).length,warnings:results.automated.filter((r=>r.status==="warning")).length,duration:new Date-this.state.startTime};return`\n            <!DOCTYPE html>\n            <html>\n            <head>\n              <title>Modal Accessibility Test Report</title>\n              <style>\n                body { font-family: system-ui; line-height: 1.6; max-width: 1200px; margin: 0 auto; padding: 20px; }\n                .test-item { margin: 10px 0; padding: 10px; border-radius: 4px; }\n                .pass { background: #e8f5e9; border-left: 4px solid #4caf50; }\n                .fail { background: #ffebee; border-left: 4px solid #f44336; }\n                .warning { background: #fff3e0; border-left: 4px solid #ff9800; }\n              </style>\n            </head>\n            <body>\n              <h1>Modal Accessibility Test Report</h1>\n              <p>Generated on: ${(new Date).toLocaleString()}</p>\n\n              <h2>Summary</h2>\n              <ul>\n                <li>Total Tests: ${summary.total}</li>\n                <li>Passed: ${summary.passed}</li>\n                <li>Failed: ${summary.failed}</li>\n                <li>Warnings: ${summary.warnings}</li>\n                <li>Duration: ${(summary.duration/1e3).toFixed(2)}s</li>\n              </ul>\n\n              <h2>Detailed Results</h2>\n              ${results.automated.map((test=>`\n                <div class="test-item ${test.status}">\n                  <h3>${test.name}</h3>\n                  <p>${test.message}</p>\n                  <small>Category: ${test.category}</small>\n                </div>\n              `)).join("")}\n            </body>\n            </html>\n          `},exportReport(){const report=this.generateReport();const blob=new Blob([report],{type:"text/html"});const url=URL.createObjectURL(blob);const a=document.createElement("a");a.href=url;a.download="modal-accessibility-report.html";document.body.appendChild(a);a.click();document.body.removeChild(a);URL.revokeObjectURL(url)},bindEvents(){this.container.querySelectorAll(".tab").forEach((tab=>{tab.addEventListener("click",(()=>{const tabName=tab.dataset.tab;this.container.querySelectorAll(".tab").forEach((t=>t.classList.remove("active")));this.container.querySelectorAll(".tab-content").forEach((c=>c.classList.remove("active")));tab.classList.add("active");this.container.querySelector(`#content-${tabName}`).classList.add("active")}))}));const exportBtn=document.createElement("button");exportBtn.className="btn";exportBtn.textContent="Export Report";exportBtn.onclick=()=>this.exportReport();this.container.appendChild(exportBtn)}};modA11yCheck.init()})();